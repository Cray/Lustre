From 16cd7ae7aa37498c7713f40f8379883be93a7128 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun.tancheff@hpe.com>
Date: Mon, 16 Nov 2020 14:13:52 +0700
Subject: [PATCH 1/7] pass owner and inode times directly

This patch reorganizes the ldiskfs patch series in
order to accommodate struct iattr being added to
ldiskfs_create_inode.
---
 fs/ext4/ext4.h   | 10 ++++++----
 fs/ext4/ialloc.c | 11 ++++++++++-
 fs/ext4/namei.c  |  6 ++++--
 3 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 6338a90..2c73d49 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2539,15 +2539,15 @@ extern struct inode *__ext4_new_inode(handle_t *, struct inode *, umode_t,
 				      const struct qstr *qstr, __u32 goal,
 				      uid_t *owner, __u32 i_flags,
 				      int handle_type, unsigned int line_no,
-				      int nblocks);
+				      int nblocks, struct iattr *iattr);
 
 #define ext4_new_inode(handle, dir, mode, qstr, goal, owner, i_flags) \
 	__ext4_new_inode((handle), (dir), (mode), (qstr), (goal), (owner), \
-			 i_flags, 0, 0, 0)
+			 i_flags, 0, 0, 0, NULL)
 #define ext4_new_inode_start_handle(dir, mode, qstr, goal, owner, \
 				    type, nblocks)		    \
 	__ext4_new_inode(NULL, (dir), (mode), (qstr), (goal), (owner), \
-			 0, (type), __LINE__, (nblocks))
+			 0, (type), __LINE__, (nblocks), NULL)
 
 
 extern void ext4_free_inode(handle_t *, struct inode *);
@@ -2681,7 +2681,9 @@ extern int ext4_dirent_csum_verify(struct inode *inode,
 extern int ext4_orphan_add(handle_t *, struct inode *);
 extern int ext4_orphan_del(handle_t *, struct inode *);
 extern struct inode *ext4_create_inode(handle_t *handle,
-				       struct inode *dir, int mode);
+				       struct inode *dir, int mode,
+				       uid_t *owner,
+				       struct iattr *iattr);
 extern int ext4_delete_entry(handle_t *handle, struct inode * dir,
 			     struct ext4_dir_entry_2 *de_del,
 			     struct buffer_head *bh);
diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index e771142..c4064a5 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -744,7 +744,7 @@ struct inode *__ext4_new_inode(handle_t *handle, struct inode *dir,
 			       umode_t mode, const struct qstr *qstr,
 			       __u32 goal, uid_t *owner, __u32 i_flags,
 			       int handle_type, unsigned int line_no,
-			       int nblocks)
+			       int nblocks, struct iattr *iattr)
 {
 	struct super_block *sb;
 	struct buffer_head *inode_bitmap_bh = NULL;
@@ -1143,6 +1143,15 @@ got:
 	if (err)
 		goto fail_drop;
 
+	if (iattr) {
+		if (iattr->ia_mtime.tv_nsec != UTIME_OMIT)
+			inode->i_mtime = iattr->ia_mtime;
+		if (iattr->ia_atime.tv_nsec != UTIME_OMIT)
+			inode->i_atime = iattr->ia_atime;
+		if (iattr->ia_ctime.tv_nsec != UTIME_OMIT)
+			inode->i_ctime = iattr->ia_ctime;
+	}
+
 	/*
 	 * Since the encryption xattr will always be unique, create it first so
 	 * that it's less likely to end up in an external xattr block and
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index fc67f31..0969c51 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -3025,11 +3025,13 @@ static int ext4_add_nondir(handle_t *handle,
 
  /* Return locked inode, then the caller can modify the inode's states/flags
   * before others finding it. The caller should unlock the inode by itself. */
-struct inode *ext4_create_inode(handle_t *handle, struct inode *dir, int mode)
+struct inode *ext4_create_inode(handle_t *handle, struct inode *dir, int mode,
+				uid_t *owner, struct iattr *iattr)
 {
 	struct inode *inode;
 
-	inode = ext4_new_inode(handle, dir, mode, NULL, 0, NULL, 0);
+	inode = __ext4_new_inode(handle, dir, mode, NULL, 0, owner, 0,
+				 0, 0, 0, iattr);
 	if (!IS_ERR(inode)) {
 		if (S_ISCHR(mode) || S_ISBLK(mode) || S_ISFIFO(mode)) {
 #ifdef CONFIG_LDISKFS_FS_XATTR
-- 
2.25.1

